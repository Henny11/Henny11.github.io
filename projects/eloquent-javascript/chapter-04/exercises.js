////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step) {
var array = [];
  
  if(start === end){return array};
  
if(step == null) {step = 1}

if(step > 0){
  for(var i = start; i <= end; i+= step){
    array.push(i);
  }
} else{
  for(var i = start; i>= end; i+=step){
     array.push(i);
  }
}
return array
}








////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  return array.reduce(function(array, element) {
    return array + element

  }, 0)
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  var myReversedArray = [];
  for (var i = array.length - 1; i > -1; i--) {
    myReversedArray.push(array[i]);
  }
  return myReversedArray;
}


////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  for (var i = 0; i <= Math.floor((array.length - 1) / 2); i++) {
    let element = array[i];
    array[i] = array[array.length - 1 - i];
    array[array.length - 1 - i] = element
  }
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  var list = null;
  for (var i = array.length - 1; i >= 0; i--) {
    list = { value: array[i], rest: list };

  }
  return list;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
  var array = [];
  for (var node = list; node; node = node.rest) {
    array.push(node.value);
  }
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(elm, list) {
  return {
    value: elm,
    rest: list
  };

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, number) {
  if (!list) {
    return undefined;
  }
  else if (number === 0) {
    return list.value

  }
  else {
    return nth(list.rest, number - 1)
  }
}


////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(a, b) {
  if (a === b) {
    return true
  }
  else if (typeof a === "object" && a !== null && typeof b === "object" && b !== null) {
    let keys = Object.keys(a).concat(Object.keys(b))
    keys = keys.filter(function(element, index, self) {
      return self.indexOf(element) === index;
    });
    for (var p of keys) {
      if (typeof a[p] === "object" && typeof b[p] === "object") {
        if (deepEqual(a[p], b[p]) === false) {
          return false
        }
      }
      else if (a[p] !== b[p]) {
        return false

      }
    }
    return true;
  }
  else {
    return false;
  }
}






////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
    